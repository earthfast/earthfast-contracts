/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockAxelarGasService,
  MockAxelarGasServiceInterface,
} from "../../../contracts/test/MockAxelarGasService";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "payNativeGasForContractCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101fd806100206000396000f3fe60806040526004361061001e5760003560e01c80630c93e3bb14610023575b600080fd5b610038610031366004610109565b5050505050565b005b80356001600160a01b038116811461005157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561008757610087610056565b604051601f8501601f19908116603f011681019082821181831017156100af576100af610056565b816040528093508581528686860111156100c857600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126100f357600080fd5b6101028383356020850161006c565b9392505050565b600080600080600060a0868803121561012157600080fd5b61012a8661003a565b9450602086013567ffffffffffffffff8082111561014757600080fd5b61015389838a016100e2565b9550604088013591508082111561016957600080fd5b61017589838a016100e2565b9450606088013591508082111561018b57600080fd5b508601601f8101881361019d57600080fd5b6101ac8882356020840161006c565b9250506101bb6080870161003a565b9050929550929590935056fea26469706673582212207c872f430aeaf996d109e51c390197bcf3b84ccc44644f7755ca4f75a3ac798d64736f6c63430008090033";

type MockAxelarGasServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAxelarGasServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAxelarGasService__factory extends ContractFactory {
  constructor(...args: MockAxelarGasServiceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAxelarGasService & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockAxelarGasService__factory {
    return super.connect(runner) as MockAxelarGasService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAxelarGasServiceInterface {
    return new Interface(_abi) as MockAxelarGasServiceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAxelarGasService {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockAxelarGasService;
  }
}
