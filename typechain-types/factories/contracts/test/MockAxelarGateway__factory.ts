/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockAxelarGateway,
  MockAxelarGatewayInterface,
} from "../../../contracts/test/MockAxelarGateway";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationContract",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "callContract",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631c92115f14610030575b600080fd5b61004361003e3660046100f8565b505050565b005b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561007657610076610045565b604051601f8501601f19908116603f0116810190828211818310171561009e5761009e610045565b816040528093508581528686860111156100b757600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126100e257600080fd5b6100f18383356020850161005b565b9392505050565b60008060006060848603121561010d57600080fd5b833567ffffffffffffffff8082111561012557600080fd5b610131878388016100d1565b9450602086013591508082111561014757600080fd5b610153878388016100d1565b9350604086013591508082111561016957600080fd5b508401601f8101861361017b57600080fd5b61018a8682356020840161005b565b915050925092509256fea2646970667358221220ff94b637af1cf193a6e667469d35ce48b0f4e7c439733ef72895b5e215ef526864736f6c63430008090033";

type MockAxelarGatewayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAxelarGatewayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAxelarGateway__factory extends ContractFactory {
  constructor(...args: MockAxelarGatewayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAxelarGateway & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAxelarGateway__factory {
    return super.connect(runner) as MockAxelarGateway__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAxelarGatewayInterface {
    return new Interface(_abi) as MockAxelarGatewayInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAxelarGateway {
    return new Contract(address, _abi, runner) as unknown as MockAxelarGateway;
  }
}
