/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ProjectMultiplex,
  ProjectMultiplexInterface,
} from "../../contracts/ProjectMultiplex";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_projects",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_projectId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_withdrawalAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "subProjectId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "escrow",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "castHash",
        type: "bytes",
      },
    ],
    name: "SubProjectCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "caster",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "escrowAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "castHash",
        type: "bytes",
      },
    ],
    name: "createProject",
    outputs: [
      {
        internalType: "bytes32",
        name: "subProjectId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "projectId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "projects",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "subProjects",
    outputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "escrow",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "subProjectId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "castHash",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawalAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108aa3803806108aa83398101604081905261002f91610087565b6001600055600280546001600160a01b039485166001600160a01b031991821617909155600392909255600480549190931691161790556100c3565b80516001600160a01b038116811461008257600080fd5b919050565b60008060006060848603121561009c57600080fd5b6100a58461006b565b9250602084015191506100ba6040850161006b565b90509250925092565b6107d8806100d26000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306b091f9146100675780633fafa1271461007c5780638b79543c14610098578063a1f10b9a146100c3578063da6e6a19146100d6578063f2bcd022146100f9575b600080fd5b61007a61007536600461056c565b61010c565b005b61008560035481565b6040519081526020015b60405180910390f35b6002546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200161008f565b6100856100d13660046105ac565b610199565b6100e96100e4366004610688565b61039f565b60405161008f94939291906106ee565b6004546100ab906001600160a01b031681565b6004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820183905283169063a9059cbb90604401602060405180830381600087803b15801561015c57600080fd5b505af1158015610170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101949190610725565b505050565b60006101a361045d565b826101eb5760405162461bcd60e51b81526020600482015260136024820152726d757374206465706f73697420657363726f7760681b60448201526064015b60405180910390fd5b600354858560405160200161022993929190928352606091821b6bffffffffffffffffffffffff199081166020850152911b16603482015260480190565b60408051808303601f1901815282825280516020918201206080840183526001600160a01b038981168086529285018890528484018290526060850187905292516323b872dd60e01b81529288166004840152306024840152604483018790529350906323b872dd90606401602060405180830381600087803b1580156102af57600080fd5b505af11580156102c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e79190610725565b50600082815260016020818152604092839020845181546001600160a01b0319166001600160a01b0390911617815584820151928101929092559183015160028201556060830151805184936103449260038501929101906104b7565b50905050856001600160a01b0316827fde222a8b8058cc550c66729456f812a7a1b4d58945519ff4846e73946e98d47e868660405161038492919061074e565b60405180910390a3506103976001600055565b949350505050565b600160208190526000918252604090912080549181015460028201546003830180546001600160a01b0390951694929391926103da90610767565b80601f016020809104026020016040519081016040528092919081815260200182805461040690610767565b80156104535780601f1061042857610100808354040283529160200191610453565b820191906000526020600020905b81548152906001019060200180831161043657829003601f168201915b5050505050905084565b600260005414156104b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101e2565b6002600055565b8280546104c390610767565b90600052602060002090601f0160209004810192826104e5576000855561052b565b82601f106104fe57805160ff191683800117855561052b565b8280016001018555821561052b579182015b8281111561052b578251825591602001919060010190610510565b5061053792915061053b565b5090565b5b80821115610537576000815560010161053c565b80356001600160a01b038116811461056757600080fd5b919050565b6000806040838503121561057f57600080fd5b61058883610550565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156105c257600080fd5b6105cb85610550565b93506105d960208601610550565b925060408501359150606085013567ffffffffffffffff808211156105fd57600080fd5b818701915087601f83011261061157600080fd5b81358181111561062357610623610596565b604051601f8201601f19908116603f0116810190838211818310171561064b5761064b610596565b816040528281528a602084870101111561066457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561069a57600080fd5b5035919050565b6000815180845260005b818110156106c7576020818501810151868301820152016106ab565b818111156106d9576000602083870101525b50601f01601f19169290920160200192915050565b60018060a01b038516815283602082015282604082015260806060820152600061071b60808301846106a1565b9695505050505050565b60006020828403121561073757600080fd5b8151801515811461074757600080fd5b9392505050565b82815260406020820152600061039760408301846106a1565b600181811c9082168061077b57607f821691505b6020821081141561079c57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212209096b38a4637b71174208f8d818fe056765d151186cc2c762eaa68822f74cb4864736f6c63430008090033";

type ProjectMultiplexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectMultiplexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProjectMultiplex__factory extends ContractFactory {
  constructor(...args: ProjectMultiplexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _projects: AddressLike,
    _projectId: BytesLike,
    _withdrawalAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _projects,
      _projectId,
      _withdrawalAddress,
      overrides || {}
    );
  }
  override deploy(
    _projects: AddressLike,
    _projectId: BytesLike,
    _withdrawalAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _projects,
      _projectId,
      _withdrawalAddress,
      overrides || {}
    ) as Promise<
      ProjectMultiplex & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ProjectMultiplex__factory {
    return super.connect(runner) as ProjectMultiplex__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectMultiplexInterface {
    return new Interface(_abi) as ProjectMultiplexInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProjectMultiplex {
    return new Contract(address, _abi, runner) as unknown as ProjectMultiplex;
  }
}
