/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export type ArmadaSlotStruct = { last: boolean; next: boolean };

export type ArmadaSlotStructOutput = [last: boolean, next: boolean] & {
  last: boolean;
  next: boolean;
};

export interface ArmadaNodesImplInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "NodeDisabledChanged"
      | "NodeHostChanged"
      | "NodePriceChanged"
  ): EventFragment;
}

export namespace NodeDisabledChangedEvent {
  export type InputTuple = [
    nodeId: BytesLike,
    oldDisabled: boolean,
    newDisabled: boolean
  ];
  export type OutputTuple = [
    nodeId: string,
    oldDisabled: boolean,
    newDisabled: boolean
  ];
  export interface OutputObject {
    nodeId: string;
    oldDisabled: boolean;
    newDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeHostChangedEvent {
  export type InputTuple = [
    nodeId: BytesLike,
    oldHost: string,
    oldRegion: string,
    newHost: string,
    newRegion: string
  ];
  export type OutputTuple = [
    nodeId: string,
    oldHost: string,
    oldRegion: string,
    newHost: string,
    newRegion: string
  ];
  export interface OutputObject {
    nodeId: string;
    oldHost: string;
    oldRegion: string;
    newHost: string;
    newRegion: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodePriceChangedEvent {
  export type InputTuple = [
    nodeId: BytesLike,
    oldLastPrice: BigNumberish,
    oldNextPrice: BigNumberish,
    newPrice: BigNumberish,
    slot: ArmadaSlotStruct
  ];
  export type OutputTuple = [
    nodeId: string,
    oldLastPrice: bigint,
    oldNextPrice: bigint,
    newPrice: bigint,
    slot: ArmadaSlotStructOutput
  ];
  export interface OutputObject {
    nodeId: string;
    oldLastPrice: bigint;
    oldNextPrice: bigint;
    newPrice: bigint;
    slot: ArmadaSlotStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArmadaNodesImpl extends BaseContract {
  connect(runner?: ContractRunner | null): ArmadaNodesImpl;
  waitForDeployment(): Promise<this>;

  interface: ArmadaNodesImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "NodeDisabledChanged"
  ): TypedContractEvent<
    NodeDisabledChangedEvent.InputTuple,
    NodeDisabledChangedEvent.OutputTuple,
    NodeDisabledChangedEvent.OutputObject
  >;
  getEvent(
    key: "NodeHostChanged"
  ): TypedContractEvent<
    NodeHostChangedEvent.InputTuple,
    NodeHostChangedEvent.OutputTuple,
    NodeHostChangedEvent.OutputObject
  >;
  getEvent(
    key: "NodePriceChanged"
  ): TypedContractEvent<
    NodePriceChangedEvent.InputTuple,
    NodePriceChangedEvent.OutputTuple,
    NodePriceChangedEvent.OutputObject
  >;

  filters: {
    "NodeDisabledChanged(bytes32,bool,bool)": TypedContractEvent<
      NodeDisabledChangedEvent.InputTuple,
      NodeDisabledChangedEvent.OutputTuple,
      NodeDisabledChangedEvent.OutputObject
    >;
    NodeDisabledChanged: TypedContractEvent<
      NodeDisabledChangedEvent.InputTuple,
      NodeDisabledChangedEvent.OutputTuple,
      NodeDisabledChangedEvent.OutputObject
    >;

    "NodeHostChanged(bytes32,string,string,string,string)": TypedContractEvent<
      NodeHostChangedEvent.InputTuple,
      NodeHostChangedEvent.OutputTuple,
      NodeHostChangedEvent.OutputObject
    >;
    NodeHostChanged: TypedContractEvent<
      NodeHostChangedEvent.InputTuple,
      NodeHostChangedEvent.OutputTuple,
      NodeHostChangedEvent.OutputObject
    >;

    "NodePriceChanged(bytes32,uint256,uint256,uint256,tuple)": TypedContractEvent<
      NodePriceChangedEvent.InputTuple,
      NodePriceChangedEvent.OutputTuple,
      NodePriceChangedEvent.OutputObject
    >;
    NodePriceChanged: TypedContractEvent<
      NodePriceChangedEvent.InputTuple,
      NodePriceChangedEvent.OutputTuple,
      NodePriceChangedEvent.OutputObject
    >;
  };
}
