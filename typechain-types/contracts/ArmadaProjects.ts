/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ArmadaCreateProjectDataStruct = {
  owner: AddressLike;
  name: string;
  email: string;
  content: string;
  checksum: BytesLike;
  metadata: string;
};

export type ArmadaCreateProjectDataStructOutput = [
  owner: string,
  name: string,
  email: string,
  content: string,
  checksum: string,
  metadata: string
] & {
  owner: string;
  name: string;
  email: string;
  content: string;
  checksum: string;
  metadata: string;
};

export type ArmadaProjectStruct = {
  id: BytesLike;
  owner: AddressLike;
  name: string;
  email: string;
  escrow: BigNumberish;
  reserve: BigNumberish;
  content: string;
  checksum: BytesLike;
  metadata: string;
};

export type ArmadaProjectStructOutput = [
  id: string,
  owner: string,
  name: string,
  email: string,
  escrow: bigint,
  reserve: bigint,
  content: string,
  checksum: string,
  metadata: string
] & {
  id: string;
  owner: string;
  name: string;
  email: string;
  escrow: bigint;
  reserve: bigint;
  content: string;
  checksum: string;
  metadata: string;
};

export interface ArmadaProjectsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "IMPORTER_ROLE"
      | "PROJECT_CREATOR_ROLE"
      | "createProject"
      | "deleteProject"
      | "depositProjectEscrow"
      | "getProject"
      | "getProjectCount"
      | "getProjects"
      | "getRegistry"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setProjectContent"
      | "setProjectEscrowImpl"
      | "setProjectMetadata"
      | "setProjectOwner"
      | "setProjectProps"
      | "setProjectReserveImpl"
      | "supportsInterface"
      | "unpause"
      | "unsafeImportData"
      | "unsafeSetEscrows"
      | "unsafeSetRegistry"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawProjectEscrow"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "Paused"
      | "ProjectContentChanged"
      | "ProjectCreated"
      | "ProjectDeleted"
      | "ProjectEscrowChanged"
      | "ProjectMetadataChanged"
      | "ProjectOwnerChanged"
      | "ProjectPropsChanged"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPORTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROJECT_CREATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [ArmadaCreateProjectDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProject",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositProjectEscrow",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjects",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[], AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectContent",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectEscrowImpl",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectMetadata",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectProps",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectReserveImpl",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unsafeImportData",
    values: [ArmadaProjectStruct[], AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeSetEscrows",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeSetRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProjectEscrow",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPORTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROJECT_CREATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositProjectEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProjectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProjectContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectEscrowImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectProps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectReserveImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeImportData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeSetEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeSetRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProjectEscrow",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectContentChangedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    oldContent: string,
    oldChecksum: BytesLike,
    newContent: string,
    newChecksum: BytesLike
  ];
  export type OutputTuple = [
    projectId: string,
    oldContent: string,
    oldChecksum: string,
    newContent: string,
    newChecksum: string
  ];
  export interface OutputObject {
    projectId: string;
    oldContent: string;
    oldChecksum: string;
    newContent: string;
    newChecksum: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    owner: AddressLike,
    name: string,
    email: string,
    content: string,
    checksum: BytesLike,
    metadata: string
  ];
  export type OutputTuple = [
    projectId: string,
    owner: string,
    name: string,
    email: string,
    content: string,
    checksum: string,
    metadata: string
  ];
  export interface OutputObject {
    projectId: string;
    owner: string;
    name: string;
    email: string;
    content: string;
    checksum: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectDeletedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    owner: AddressLike,
    name: string,
    email: string,
    content: string,
    checksum: BytesLike,
    metadata: string
  ];
  export type OutputTuple = [
    projectId: string,
    owner: string,
    name: string,
    email: string,
    content: string,
    checksum: string,
    metadata: string
  ];
  export interface OutputObject {
    projectId: string;
    owner: string;
    name: string;
    email: string;
    content: string;
    checksum: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectEscrowChangedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    oldEscrow: BigNumberish,
    newEscrow: BigNumberish
  ];
  export type OutputTuple = [
    projectId: string,
    oldEscrow: bigint,
    newEscrow: bigint
  ];
  export interface OutputObject {
    projectId: string;
    oldEscrow: bigint;
    newEscrow: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectMetadataChangedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    oldMetadata: string,
    newMetadata: string
  ];
  export type OutputTuple = [
    projectId: string,
    oldMetadata: string,
    newMetadata: string
  ];
  export interface OutputObject {
    projectId: string;
    oldMetadata: string;
    newMetadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectOwnerChangedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    oldOwner: AddressLike,
    newOwner: AddressLike
  ];
  export type OutputTuple = [
    projectId: string,
    oldOwner: string,
    newOwner: string
  ];
  export interface OutputObject {
    projectId: string;
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectPropsChangedEvent {
  export type InputTuple = [
    projectId: BytesLike,
    oldName: string,
    oldEmail: string,
    newName: string,
    newEmail: string
  ];
  export type OutputTuple = [
    projectId: string,
    oldName: string,
    oldEmail: string,
    newName: string,
    newEmail: string
  ];
  export interface OutputObject {
    projectId: string;
    oldName: string;
    oldEmail: string;
    newName: string;
    newEmail: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArmadaProjects extends BaseContract {
  connect(runner?: ContractRunner | null): ArmadaProjects;
  waitForDeployment(): Promise<this>;

  interface: ArmadaProjectsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  IMPORTER_ROLE: TypedContractMethod<[], [string], "view">;

  PROJECT_CREATOR_ROLE: TypedContractMethod<[], [string], "view">;

  createProject: TypedContractMethod<
    [project: ArmadaCreateProjectDataStruct],
    [string],
    "nonpayable"
  >;

  deleteProject: TypedContractMethod<
    [projectId: BytesLike],
    [void],
    "nonpayable"
  >;

  depositProjectEscrow: TypedContractMethod<
    [
      projectId: BytesLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getProject: TypedContractMethod<
    [projectId: BytesLike],
    [ArmadaProjectStructOutput],
    "view"
  >;

  getProjectCount: TypedContractMethod<[], [bigint], "view">;

  getProjects: TypedContractMethod<
    [skip: BigNumberish, size: BigNumberish],
    [ArmadaProjectStructOutput[]],
    "view"
  >;

  getRegistry: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [admins: AddressLike[], registry: AddressLike, grantImporterRole: boolean],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setProjectContent: TypedContractMethod<
    [projectId: BytesLike, content: string, checksum: BytesLike],
    [void],
    "nonpayable"
  >;

  setProjectEscrowImpl: TypedContractMethod<
    [projectId: BytesLike, decrease: BigNumberish, increase: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProjectMetadata: TypedContractMethod<
    [projectId: BytesLike, metadata: string],
    [void],
    "nonpayable"
  >;

  setProjectOwner: TypedContractMethod<
    [projectId: BytesLike, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  setProjectProps: TypedContractMethod<
    [projectId: BytesLike, name: string, email: string],
    [void],
    "nonpayable"
  >;

  setProjectReserveImpl: TypedContractMethod<
    [projectId: BytesLike, decrease: BigNumberish, increase: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unsafeImportData: TypedContractMethod<
    [
      projects: ArmadaProjectStruct[],
      creators: AddressLike[],
      revokeImporterRole: boolean
    ],
    [void],
    "nonpayable"
  >;

  unsafeSetEscrows: TypedContractMethod<
    [
      skip: BigNumberish,
      size: BigNumberish,
      mul: BigNumberish,
      div: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  unsafeSetRegistry: TypedContractMethod<
    [registry: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdrawProjectEscrow: TypedContractMethod<
    [projectId: BytesLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IMPORTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROJECT_CREATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [project: ArmadaCreateProjectDataStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteProject"
  ): TypedContractMethod<[projectId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositProjectEscrow"
  ): TypedContractMethod<
    [
      projectId: BytesLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProject"
  ): TypedContractMethod<
    [projectId: BytesLike],
    [ArmadaProjectStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjects"
  ): TypedContractMethod<
    [skip: BigNumberish, size: BigNumberish],
    [ArmadaProjectStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [admins: AddressLike[], registry: AddressLike, grantImporterRole: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProjectContent"
  ): TypedContractMethod<
    [projectId: BytesLike, content: string, checksum: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProjectEscrowImpl"
  ): TypedContractMethod<
    [projectId: BytesLike, decrease: BigNumberish, increase: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProjectMetadata"
  ): TypedContractMethod<
    [projectId: BytesLike, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProjectOwner"
  ): TypedContractMethod<
    [projectId: BytesLike, owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProjectProps"
  ): TypedContractMethod<
    [projectId: BytesLike, name: string, email: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProjectReserveImpl"
  ): TypedContractMethod<
    [projectId: BytesLike, decrease: BigNumberish, increase: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsafeImportData"
  ): TypedContractMethod<
    [
      projects: ArmadaProjectStruct[],
      creators: AddressLike[],
      revokeImporterRole: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unsafeSetEscrows"
  ): TypedContractMethod<
    [
      skip: BigNumberish,
      size: BigNumberish,
      mul: BigNumberish,
      div: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unsafeSetRegistry"
  ): TypedContractMethod<[registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawProjectEscrow"
  ): TypedContractMethod<
    [projectId: BytesLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectContentChanged"
  ): TypedContractEvent<
    ProjectContentChangedEvent.InputTuple,
    ProjectContentChangedEvent.OutputTuple,
    ProjectContentChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectDeleted"
  ): TypedContractEvent<
    ProjectDeletedEvent.InputTuple,
    ProjectDeletedEvent.OutputTuple,
    ProjectDeletedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectEscrowChanged"
  ): TypedContractEvent<
    ProjectEscrowChangedEvent.InputTuple,
    ProjectEscrowChangedEvent.OutputTuple,
    ProjectEscrowChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectMetadataChanged"
  ): TypedContractEvent<
    ProjectMetadataChangedEvent.InputTuple,
    ProjectMetadataChangedEvent.OutputTuple,
    ProjectMetadataChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectOwnerChanged"
  ): TypedContractEvent<
    ProjectOwnerChangedEvent.InputTuple,
    ProjectOwnerChangedEvent.OutputTuple,
    ProjectOwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectPropsChanged"
  ): TypedContractEvent<
    ProjectPropsChangedEvent.InputTuple,
    ProjectPropsChangedEvent.OutputTuple,
    ProjectPropsChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProjectContentChanged(bytes32,string,bytes32,string,bytes32)": TypedContractEvent<
      ProjectContentChangedEvent.InputTuple,
      ProjectContentChangedEvent.OutputTuple,
      ProjectContentChangedEvent.OutputObject
    >;
    ProjectContentChanged: TypedContractEvent<
      ProjectContentChangedEvent.InputTuple,
      ProjectContentChangedEvent.OutputTuple,
      ProjectContentChangedEvent.OutputObject
    >;

    "ProjectCreated(bytes32,address,string,string,string,bytes32,string)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectDeleted(bytes32,address,string,string,string,bytes32,string)": TypedContractEvent<
      ProjectDeletedEvent.InputTuple,
      ProjectDeletedEvent.OutputTuple,
      ProjectDeletedEvent.OutputObject
    >;
    ProjectDeleted: TypedContractEvent<
      ProjectDeletedEvent.InputTuple,
      ProjectDeletedEvent.OutputTuple,
      ProjectDeletedEvent.OutputObject
    >;

    "ProjectEscrowChanged(bytes32,uint256,uint256)": TypedContractEvent<
      ProjectEscrowChangedEvent.InputTuple,
      ProjectEscrowChangedEvent.OutputTuple,
      ProjectEscrowChangedEvent.OutputObject
    >;
    ProjectEscrowChanged: TypedContractEvent<
      ProjectEscrowChangedEvent.InputTuple,
      ProjectEscrowChangedEvent.OutputTuple,
      ProjectEscrowChangedEvent.OutputObject
    >;

    "ProjectMetadataChanged(bytes32,string,string)": TypedContractEvent<
      ProjectMetadataChangedEvent.InputTuple,
      ProjectMetadataChangedEvent.OutputTuple,
      ProjectMetadataChangedEvent.OutputObject
    >;
    ProjectMetadataChanged: TypedContractEvent<
      ProjectMetadataChangedEvent.InputTuple,
      ProjectMetadataChangedEvent.OutputTuple,
      ProjectMetadataChangedEvent.OutputObject
    >;

    "ProjectOwnerChanged(bytes32,address,address)": TypedContractEvent<
      ProjectOwnerChangedEvent.InputTuple,
      ProjectOwnerChangedEvent.OutputTuple,
      ProjectOwnerChangedEvent.OutputObject
    >;
    ProjectOwnerChanged: TypedContractEvent<
      ProjectOwnerChangedEvent.InputTuple,
      ProjectOwnerChangedEvent.OutputTuple,
      ProjectOwnerChangedEvent.OutputObject
    >;

    "ProjectPropsChanged(bytes32,string,string,string,string)": TypedContractEvent<
      ProjectPropsChangedEvent.InputTuple,
      ProjectPropsChangedEvent.OutputTuple,
      ProjectPropsChangedEvent.OutputObject
    >;
    ProjectPropsChanged: TypedContractEvent<
      ProjectPropsChangedEvent.InputTuple,
      ProjectPropsChangedEvent.OutputTuple,
      ProjectPropsChangedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
